06-Player Characters :


Definition : Player Characters are the characters in your party roster,  along with some NPC or summoned Creatures.
the PlayerCharacter class inherits from the Creature class, and they have a few extra features.

Ctrl+F :
1-PC specific variables
2-Class and Race scripts




1-PC specific variables :


var portrait : Texture2D = null	#Those are loaded from  the PC's save folder. Creatures use their overworld graphics instead.
var icon : Texture2D = null #They are copied to the PC's save folder  from the Data folder on character creation.

var exp_tnl : int = 999999999999 #Experience to new level
var selection_pts : int = 0 #Spell/Ability selection points, usually gained on level up.

var equippable_types : Dictionary # Defines what the PC can equip, built by their Race and Class scripts.
				# keys = equipment type String, value : int, >0 means equippable.

var cur_campaign : String = "Free"  #for Honest Mode, the name of the campaign they are currently in.

var classgd : GDScript = null #Also loaded from the PC's save folder.
var racegd : GDScript = null # Built from the template in Data folder on character creation.




2-Class and Race scripts :


Class and Race scripts are what defines a Player CHaracter the most. Both work the same.

const classrace_name  : String = "Fighter"  #The name of the class or race
const classrace_types : String = ["Warrior Classes"] #the categories this class or race fit in
const classrace_definition : String = "Jack of all trades of everything related to physical combat" #short description

const can_dual_wield : bool = true	#Still not implemented, sorry.
const used_resource : String = "RP"	#Again, can be "SP" "RP" "FP"  "TP"

const base_stat_bonuses : Dictionary	# The bonuses to base class that the character receives.
					# We need to agree won which gives most stats...
					# Race gives the average stats for that race (stats around 10-15,  10 MaxMovement),
					# and Class modifies  that (say -2 "Strength" +3 "Intellect" -1 MaMovement)

const levelup_bonuses : Dictionary	#Stats given on every level up by static func _level_up(character)
					#Should probably only give maxHP maxSP Accuracy and Evasion, Critical,
					# and Ancrobatics Pick_Lock etc


static func _mod_equippable(character) : #Sets what types of equipment the character may equip.
					 #all types start at 0, >0 = equippable
					 #example : character.equippable_types["Robe"] +=10
						    character.equippable_types["PlateArmor"] -=100

static func _add_base_stats(character)
#how the base stats from the class/race are applied to the character.
#You probably shouldn't touch this.

static func _level_up(character)
#applies normal level up bonuses with	character.base_stats[s] += levelup_bonuses[s],
#can give spell selection points with 	character.selection_pts +=2
#can also give traits  (from a .gd script in the Traits foler, or define  the trait as
#a subclass in the Class/Race script)

static func can_learn_spell(character, spell) -> int # a scole, like equipment
# if  classgd.can_learn_spell + racegd.can_learn_spell >0, the character can learn
# Races should usually always return 0 unless,say,
# Demons should not learn any Holy magic but learn more Fire magic.

static func _character_creation_gifts(character)
# Gives the newly created character items and spells.
#example : 	character.selection_pts += max(int(character.get_stat("Intellect")/2-5),0)
#		var resources = NodeAccess.__Resources()
#		resources.load_item_resources("shared_assets/items/")
#		var dagger = resources.items_book["Dagger"]
#		character.inventory.append(dagger.duplicate(true))
#		resources.load_spell_resources( "res://shared_assets/spells/" )
#		character.add_spell_from_spells_book("Cosmic Blast")
#		var traitscript = load("res://shared_assets/traits/"+"regeneration_over_time.gd")
#		character.add_trait(traitscript.new( [1.0,-1] ) )

static func get_ablty_res_cost_mod(character, spell, plvl : int, cost ) :
	return cost
#modifies the cost of  spells and abilties. Should usually return 0, unless, say,
#Dwarves have cheaper Earth spell, then it would be	return int(-cost/2)


Class only :
const can_manage_ablt_anywhere = false	#WHether  they can access and  modify the list of spell  they know. Class only.

static func get_max_perma_summons(character) ->int : #returns the max amount of summons a character may keep
	return 1
