{
"Heal Minor Wounds" :
"
var name : String = 'Heal Minor Wounds'
var attributes : Array = ['Healing']
var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall 
var schools: Array = ['Priest']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = true
var in_combat : bool = true
var description : String = 'Instantly heals a single target in melee range\\nHeal : 1-8 x Power\\nSP cost : Power * 10'
var resist : int = 0 #ignores resistances and dodge
#var aoe : String = 'b1'
var los : bool = true
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Cloud'
var proj_hit : String = 'Sphere'
var sounds : Array = ['','slurpy.wav']
var max_focus_loss : int = 0

static func get_targets(_power : int, __casterchar)->int :
	return 1

#static func get_hits(_power : int, __casterchar)->int :
#	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return 0

static func get_max_duration(_power : int, __casterchar) -> int :
	return 0

#static func get_duration_roll(_power : int, __casterchar) -> int :
#	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 1
	
static func get_min_damage(_power:int, _casterchar) :
	return 1*_power
	
static func get_max_damage(_power:int, _casterchar) :
	return 8*_power
	
static func get_damage_roll(_power : int, _casterchar) :
	var dmg = 0
	var mindmg = 1
	var maxdmg = 8
	for i in range(_power) :
		dmg += mindmg+ randi()%maxdmg
	return dmg

static func get_accuracy(_casterchar, _power : int) :
	return -7777777 #= infinite wiith resist==0 anyway

static func get_sp_cost(_power : int, _casterchar) :
	return _power*10

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'b1'

"
,

"Bow Shot" :
"
var name : String = 'Bow Shot'
var attributes : Array = ['Physical', 'Ranged', 'Projectile']
var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall 4=anywhere
var schools : Array = ['Item']
var level : int = 1
var selection_cost : int = 0
var max_plevel : int = 1
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Shoots an equipped Arrow'
var resist : int = 3 #proctcted with resistances and dodge
#var aoe : String = 'b1'
var los : bool = true
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Arrow'
var proj_hit : String = 'Target'
var sounds : Array = ['bow.wav','arrow hit.wav']

static func get_targets(_power : int, _casterchar)->int :
	return 1

#static func get_hits(_power : int, _casterchar)->int :
#	return 1

static func get_min_duration(_power : int, _casterchar) -> int :
	return 0

static func get_max_duration(_power : int, _casterchar) -> int :
	return 0

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 0

static func get_is_critical(_casterchar, defender, spellpower : int) -> bool :
	var is_crit : bool = _casterchar.get_stat('Ranged_Crit_Rate') > randf()
	print('spellsbook bow sht is crit ? ', is_crit)
	return is_crit

static func get_critical_mult(_casterchar, defender, spellpower : int ) -> float :
	return _casterchar.get_stat('Ranged_Crit_Mult')


static func get_range(_power : int, _casterchar) -> int :
	if _casterchar.current_ammo_weapon != _casterchar.ITEM_NO_AMMO_WEAPON :
		if _casterchar.current_ammo_weapon['stats'].has('Range') :
			return 12 + _casterchar.current_ammo_weapon['stats']['Range']
		else :
			return 12
	else :
		return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return 1*_power + floor( _casterchar.get_stat('Strength') *0.05 )
	
static func get_max_damage(_power:int, _casterchar) :
	return 6*_power + floor( _casterchar.get_stat('Strength') *0.3 )
	
static func get_damage_roll(_power : int, _casterchar) :
	var dmg : int = 0
	var mindmg : int = 1
	var maxdmg : int = 6
	var mindmgfromstats : int= floor( float( _casterchar.get_stat('Strength') ) *0.05 )
	var maxdmgfromstats : int = floor( float( _casterchar.get_stat('Strength') ) *0.3 )
	for i in range(_power) :
		dmg += mindmg+ randi()%maxdmg   + mindmgfromstats + randi_range(0,maxdmgfromstats)
	dmg += _casterchar.get_stat('Bonus_Physical_dmg')
	return dmg



static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_accuracy(_casterchar, defender,power : int) :
	return _casterchar.get_stat('AccuracyRanged')

static func get_evasion(_casterchar, defender, _power : int) :
	return defender.get_stat('EvasionRanged')

static func get_aoe(_power : int, _casterchar) :
	return 'b1'

#static func get_chain(_power : int, _casterchar) :
#	return [['Bow Shot',1],['Bow Shot',2],['Bow Shot',3]]


"
,
"Plane of Frost" :
"
var name : String = 'Plane of Frost'
var attributes : Array = ['Ice']
var targettile : int = 4  #0=anywhere 1=creature 2=empty 3=nowall 4=anywhere
var schools : Array = ['Sorcerer']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Creates icy hurty terrain'
var resist : int = 1 #ignores dodge
#var aoe : String = 'wh'
var los : bool = true
var ray : bool = false
var rot : bool = true
#var proj_tex : String = 'Cloud'
var proj_hit : String = 'Ice'
var sounds : Array = ['','spell launch 5.wav']
var places_terrain : bool = true
var terrain_tex : String = 'Spk'
var terrain_walk_type : int = 0 #0=on entry and re entry this turn 1=every step

static func get_range(_power : int, _casterchar) -> int :
	return 8

static func get_targets(_power : int, _casterchar)->int :
	return 1  #i this ever used ?

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_hits(_power : int, _casterchar)->int :
	return 1

static func get_min_duration(_power : int, _casterchar) -> int :
	return 3

static func get_max_duration(_power : int, _casterchar) -> int :
	return 3

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 3

static func get_sp_cost(_power : int, _casterchar) :
	return _power*10

static func get_aoe(_power : int, _casterchar) :
	return 'wh'

static func get_min_damage(_power:int, _casterchar) :
	return 1*_power
	
static func get_max_damage(_power:int, _casterchar) :
	return 8*_power

static func get_accuracy(_casterchar, _power : int) :
	return 1.0

",
"Phase" :
"
var name : String = 'Phase'
var attributes : Array = ['Magical']
var targettile : int = 2  #0=anywhere 1=creature 2=empty 3=nowall 
var schools : Array = ['Sorcerer']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Teleports the user to an empty space\\nSP cost : Power * 10'
var resist : int = 0 #ignores resistances and dodge
#var aoe : String = 'b1'
var los : bool = false
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Cloud'
var proj_hit : String = 'Sphere'
var sounds : Array = ['','spell effect.wav']

static func get_targets(_power : int, _casterchar)->int :
	return 1

static func get_hits(_power : int, _casterchar)->int :
	return 0

static func get_min_duration(_power : int, _casterchar) -> int :
	return 0

static func get_max_duration(_power : int, _casterchar) -> int :
	return 0

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 0

static func get_range(_power : int, _casterchar) -> int :
	return _power*3
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return -7777777 #= infinite

static func get_sp_cost(_power : int, _casterchar) :
	return _power*10

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'b1'

static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) :
	print('PHASE TELEPORT !!!')
	var newtpos : Vector2 = _main_targeted_tile
	_castercrea.combat_button.position  = Utils.GRID_SIZE * newtpos
	_castercrea.position = newtpos
	return true

",
"Summon Alien Beetle":
"
var name : String = 'Summon Alien Beetle'
var attributes : Array = ['Magical']
var targettile : int = 2  #0=anywhere 1=creature 2=empty 3=nowall 
var schools : Array =['Sorcerer']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Summon an alien beetle\\nSP cost : Power * 10'
var resist : int = 0 #ignores resistances and dodge
#var aoe : String = 'b1'
var los : bool = false
var ray : bool = false
var rot : bool = false
#var proj_tex : String = 'Cloud'
var proj_hit : String = 'Whirl'
var sounds : Array = ['','spell effect.wav']

static func get_targets(_power : int, _casterchar)->int :
	return 1

static func get_hits(_power : int, _casterchar)->int :
	return 0

static func get_min_duration(_power : int, _casterchar) -> int :
	return 0

static func get_max_duration(_power : int, _casterchar) -> int :
	return 0

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 0

static func get_range(_power : int, _casterchar) -> int :
	return _power*3
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return -7777777 #= infinite

static func get_sp_cost(_power : int, _casterchar) :
	return _power*10

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'b1'

static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) :
	print('SUMMON Alien Beetle json !!!')
	var newpos : Vector2 = _main_targeted_tile
	print('SPECIAL before creature. load')
	var CreatureGD : GDScript = load('res://Creature/Creature.gd')
	print('SPECIAL before creature.new')
	var creascript = CreatureGD.new()
	print('SPECIAL before init from bestiary')
	creascript.initialize_from_bestiary_dict('Alien Beetle')
	print('SPECIAL aftre init from bestiary')
	creascript.position = newpos
	creascript.is_summoned = true
	creascript.summoner_name = _castercrea.name
	creascript.summoner = _castercrea
	creascript.baseFaction = _castercrea.baseFaction
	creascript.curFaction = _castercrea.curFaction
	var alternate_tex : ImageTexture = GameGlobal.cmp_resources.images_book['CREA_alienbeetle_2']['tex']
	if randi_range(0,1)==1 :
		creascript.textureL = alternate_tex
		creascript.textureR = alternate_tex
	StateMachine.combat_state.add_pc_or_npc_ally_to_battle_map(creascript, newpos)
	return true

#	var combatcreaturemapobjectTSCN = load('res://scenes/Map/CombatCharacter.tscn')
#	var crea_mapb = combatcreaturemapobjectTSCN.instantiate()
#		# creatures_node charactersnode
#	GameGlobal.map.creatures_node.add_child(crea_mapb)
#	crea_mapb.set_creature_represented(creascript)
#	creascript.combat_button = crea_mapb
#	crea_mapb.bgsprite.hide()
#		crea_mapb.tile_position_x = creascript.position.x
#		crea_mapb.tile_position_y = creascript.position.y
#	GameGlobal.all_battle_creatures_btns.append(crea_mapb)
#	GameGlobal.player_allies.append(creascript)
#	UI.ow_hud.fillCharactersRect()


",

"Bear Form":
"
var name : String = 'Bear Form'
var attributes : Array = ['Magical']
var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall  4=no_targ_phase
var schools : Array = ['Druid']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'TUrn ino a BEAR!!!\\nSP cost : Power * 10'
var resist : int = 0 #ignores resistances and dodge
#var aoe : String = 'sf'
var los : bool = false
var ray : bool = false
var rot : bool = false
#var proj_tex : String = 'Cloud'
var proj_hit : String = 'Whirl'
var sounds : Array = ['','spell effect.wav']

static func get_targets(_power : int, _casterchar)->int :
	return 1

static func get_hits(_power : int, _casterchar)->int :
	return 0

static func get_min_duration(_power : int, _casterchar) -> int :
	return _power

static func get_max_duration(_power : int, _casterchar) -> int :
	return _power

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 0

static func get_range(_power : int, _casterchar) -> int :
	return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return -7777777 #= infinite

static func get_sp_cost(_power : int, _casterchar) :
	return _power*5

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'sf' #sf=self

static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) -> bool :
	print('BEAR MORPH !!!')
	
	var traitscript = load('res://shared_assets/traits/'+'t_druidmorph.gd')
	var alternate_tex : ImageTexture = NodeAccess.__Resources().images_book['CREA_teddybear']['tex']
	var trait_array : Array = [alternate_tex, _power]
	_castercrea.add_trait(traitscript , trait_array)
	return true

",

"Cosmic Blast":
"
var name : String = 'Cosmic Blast'
var attributes : Array = ['Magical']
var targettile : int = 4  #0=anywhere 1=creature 2=empty 3=nowall  4=no_targ_phase
var schools : Array =['Sorcerer']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Cosmic Blaaaaaast !\\nSP cost : Power * 10'
var resist : int = 2 #can be resisted but not dodged
#var aoe : String = 'eo'
var los : bool = false
var ray : bool = false
var rot : bool = false
#var proj_tex : String = 'Cloud'
var proj_hit : String = 'Sphere'
var sounds : Array = ['','spell effect.wav']

static func get_targets(_power : int, _casterchar)->int :
	return 1

static func get_hits(_power : int, _casterchar)->int :
	return 0

static func get_min_duration(_power : int, _casterchar) -> int :
	return 0

static func get_max_duration(_power : int, _casterchar) -> int :
	return 0

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 0

static func get_range(_power : int, _casterchar) -> int :
	return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return 1
	
static func get_max_damage(_power:int, _casterchar) :
	return 4
	
static func get_damage_roll(_power : int, _casterchar) :
	var dmg = 0
	var mindmg = 1
	var maxdmg = 4
	for i in range(_power) :
		dmg += mindmg+ randi()%maxdmg
	return dmg

static func get_accuracy(_casterchar, _power : int) :
	return 1.0

static func get_sp_cost(_power : int, _casterchar) :
	return _power*10

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'ae' #ae = all enemies

",
"Heat Ray" :
"
var name : String = 'Heat Ray'
var attributes : Array = ['Fire', 'Magical']
var targettile : int = 0  #0=anywhere 1=creature 2=empty 3=nowall 
var schools : Array = ['Sorcerer']
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Fires a piercing Fire Ray\\nFire : 1-4 x Power\\nSP cost : Power * 4'
var resist : int = 3 #protected with resistances and dodge
var aoe : String = 'b1'
var los : bool = true
var ray : bool = true
var rot : bool = false
var proj_tex : String = 'Fire'
var proj_hit : String = 'Fire'
var sounds : Array = ['spell launch 5.wav','collision.wav']

static func get_targets(_power : int, _casterchar)->int :
	return 1

static func get_hits(_power : int, _casterchar)->int :
	return 1

static func get_min_duration(_power : int, _casterchar) -> int :
	return 0

static func get_max_duration(_power : int, _casterchar) -> int :
	return 0

static func get_duration_roll(_power : int, _casterchar) -> int :
	return 0

static func get_range(_power : int, _casterchar) -> int :
	return _power+2
	
static func get_min_damage(_power:int, _casterchar) :
	return 1*_power
	
static func get_max_damage(_power:int, _casterchar) :
	return 4*_power
	
static func get_damage_roll(_power : int, _casterchar) :
	var dmg = 0
	var mindmg = 1
	var maxdmg = 8
	for i in range(_power) :
		dmg += mindmg+ randi()%maxdmg
	return dmg

static func get_accuracy(_casterchar, _power : int) :
	return 1.0

static func get_sp_cost(_power : int, _casterchar) :
	return _power*4

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'b1'

",
"Discover Magic" :
"var name : String = 'Discover Magic'
var attributes : Array = []
var tags : Array = ['Magical', 'Melee']
var schools : Array = ['Sorcerer']

var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall 

var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = true
var in_combat : bool = true
var description : String = 'Identifies all magic items on target.\\nCan be used in or out of combat or during treasure collection.\\nSP cost : Power * 1'
var resist : int = 0 #ignores resistances and dodge
#var aoe : String = 'b1'
var los : bool = true
var ray : bool = false
var rot : bool = false
#var proj_tex : String = 'Cloud'
var proj_hit : String = 'Whirl'
var sounds : Array = ['','spell launch 5.wav']
var max_focus_loss : int = 0

static func get_targets(_power : int, __casterchar)->int :
	return 1

#static func get_hits(_power : int, __casterchar)->int :
#	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return 0

static func get_max_duration(_power : int, __casterchar) -> int :
	return 0

#static func get_duration_roll(_power : int, __casterchar) -> int :
#	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 1
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return 100 #= infinite wiith resist==0 anyway

static func get_sp_cost(_power : int, _casterchar) :
	return _power

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'b1'

static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) -> bool :
	var text : String = ''
	for c : Creature in _effected_creas :
		var c_magic_items : Array = []
		for i : Dictionary in c.inventory :
			if i['is_magical'] : c_magic_items.append(i['name'])
		if c_magic_items.is_empty() :
			text += c.name + ' carries no magic item.\\n'
		else :
			text += c.name + ' carries magic items :\\n'
			for i : int in range(c_magic_items.size()) :
				if i < c_magic_items.size() :
					text += c_magic_items[i] +', '
				else :
					text += c_magic_items[i] +'\\n'
	var textRect = UI.ow_hud.textRect
	if StateMachine.is_combat_state() :
		textRect.show()
		UI.ow_hud.creatureRect.hide()
	textRect.set_text(text, true)
	await textRect.interruption_over
	if StateMachine.is_combat_state() :
		textRect.hide()
		UI.ow_hud.creatureRect.show()
	return true
" ,
"Identify Objects" :
"var name : String = 'Identify Objects'
var attributes : Array = []
var tags : Array = ['Magical', 'Melee']
var schools : Array = ['Enchanter','Sorcerer']

var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall 

var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 1
var in_field : bool = true
var in_combat : bool = true
var description : String = 'Identifies all magic items on target.\\nOnly usable out of combat.\\nSP cost : 25'
var resist : int = 0 #ignores resistances and dodge
var los : bool = true
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Ball'
var proj_hit : String = 'Target'
var sounds : Array = ['force field.wav','spell launch 5.wav']
var max_focus_loss : int = 0

static func get_targets(_power : int, __casterchar)->int :
	return 1

#static func get_hits(_power : int, __casterchar)->int :
#	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return 0

static func get_max_duration(_power : int, __casterchar) -> int :
	return 0

#static func get_duration_roll(_power : int, __casterchar) -> int :
#	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return 100 #= infinite wiith resist==0 anyway

static func get_sp_cost(_power : int, _casterchar) :
	return _power

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'b1'


static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) -> bool :
	for c : Creature in _effected_creas :
		for i : Dictionary in c.inventory :
			i['is_identified'] = 1
	return true
",
"Free Fall" :
"var name : String = 'Free Fall'
var attributes : Array = []
var tags : Array = ['Magical', 'Free Fall']
var schools : Array = ['Enchanter','Sorcerer']

var targettile : int = 0  #0=anywhere 1=creature 2=empty 3=nowall 

var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 1
var in_field : bool = true
var in_combat : bool = false
var description : String = 'Identifies all magic items on target.\\nOnly usable out of combat.\\nSP cost : 25'
var resist : int = 0 #ignores resistances and dodge
var los : bool = true
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Sphere'
var proj_hit : String = 'Target'
var sounds : Array = ['wind.wav','boing.wav']
var max_focus_loss : int = 0

static func get_targets(_power : int, __casterchar)->int :
	return 0

#static func get_hits(_power : int, __casterchar)->int :
#	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return 20

static func get_max_duration(_power : int, __casterchar) -> int :
	return 40

#static func get_duration_roll(_power : int, __casterchar) -> int :
#	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return 100 #= infinite wiith resist==0 anyway

static func get_sp_cost(_power : int, _casterchar) :
	return _power*10

static func get_target_number(_power : int, _casterchar) :
	return 0

static func get_aoe(_power : int, _casterchar) :
	return 'sf'


static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) -> bool :
	var duration = 0
	for i in range(_power) :
		duration += 20 + randi()% 21
	GameGlobal.global_effects['FeatherFall']['Duration'] += _power * duration
	UI.ow_hud.updateGlobalEffectsDisplay()
	return true
",
"Magic Darts" :
"var name : String = 'Magic Darts'
var attributes : Array = ['Magical']
var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall 
var school : String = 'Sorcerer'
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = '1-5*Power damage, Power= targets, 15 Range.'
var resist : int = 2 #ignores evasion
#var aoe : String = 'b1'
var los : bool = true
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Spark'
var proj_hit : String = 'Spark'
var sounds : Array = ['bonk.wav','energy blast.wav']
var max_focus_loss : int = 0

static func get_targets(_power : int, __casterchar)->int :
	return _power

static func get_min_duration(_power : int, __casterchar) -> int :
	return 0

static func get_max_duration(_power : int, __casterchar) -> int :
	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 15
	
static func get_min_damage(_power:int, _casterchar) :
	return 1
	
static func get_max_damage(_power:int, _casterchar) :
	return 5
	
static func get_damage_roll(_power : int, _casterchar) :
	var dmg = 0
	var mindmg = 1
	var maxdmg = 5
	for i in range(_power) :
		dmg += mindmg+ randi()%maxdmg
	return dmg

static func get_accuracy(_casterchar, _power : int) :
	return 1.0

static func get_sp_cost(_power : int, _casterchar) :
	return 4*_power

static func get_target_number(_power : int, _casterchar) :
	return _power

static func get_aoe(_power : int, _casterchar) :
	return 'b1'
"
,
"Sparkling Armor" :
"var name : String = 'Sparkling Armor'
var attributes : Array = []
var targettile : int = 0  #0=anywhere 1=creature 2=empty 3=nowall 
var school : String = 'Sorcerer'
var level : int = 1
var selection_cost : int = 1
var max_plevel : int = 7
var in_field : bool = true
var in_combat : bool = true
var description : String = 'Temporary Protection from Physical Attacks.'
var resist : int = 0 #ignores resistances and dodge
#var aoe : String = 'b1'
var los : bool = false
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Whirl'
var proj_hit : String = 'Target'
var sounds : Array = ['dididup.wav','hit effect 1.wav']
var max_focus_loss : int = 1

static func get_targets(_power : int, __casterchar)->int :
	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return _power

static func get_max_duration(_power : int, __casterchar) -> int :
	return _power

static func get_range(_power : int, __casterchar) -> int :
	return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return -7777777 #= infinite wiith resist==0 anyway

static func get_sp_cost(_power : int, _casterchar) :
	return 2*_power

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'sf' #self

static func add_traits_to_target(_castercrea, c,_power) :
	var traitscript = load('res://shared_assets/traits/'+'t_pro_hits.gd')
	c.add_trait(traitscript,[_power])

",
"Radiate" :
"
var name : String = 'Radiate'
var attributes : Array = ['Magical']
var tags : Array = ['Magical', 'Melee']
var schools : Array = ['Sorcerer']

var targettile : int = 1  #0=anywhere 1=creature 2=empty 3=nowall 

var level : int = 3
var selection_cost : int = 6
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Damage : 2-15 x Power\\n  Range : 0\\n  Target : All Adjacent\\n   Sight : NA'
var resist : int = 3 # dodgable resistable
#var aoe : String = 'b1'
var los : bool = false
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Spark'
var proj_hit : String = 'Spinny'
var sounds : Array = ['resurrect death.wav','swup.wav']
var max_focus_loss : int = 1

static func get_targets(_power : int, __casterchar)->int :
	return 1

#static func get_hits(_power : int, __casterchar)->int :
#	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return 0

static func get_max_duration(_power : int, __casterchar) -> int :
	return 0

#static func get_duration_roll(_power : int, __casterchar) -> int :
#	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 0
	
static func get_min_damage(_power:int, _casterchar) :
	return _power *2
	
static func get_max_damage(_power:int, _casterchar) :
	return _power * 15
	
static func get_damage_roll(_power : int, _casterchar) :
	var dmg = 0
	var mindmg = 2
	var maxdmg = 15
	for i in range(_power) :
		dmg += mindmg+ randi()%(maxdmg-mindmg+1)
	return dmg

static func get_accuracy(_casterchar, _power : int) :
	return 0.9

static func get_sp_cost(_power : int, _casterchar) :
	return _power*25

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'rd' #radiate, all adjacent
",
"Web" :
"var name : String = 'Slug'
var attributes : Array = []
var tags : Array = ['Magical', 'Debuff']
var schools : Array = ['Priest','Sorcerer']
var targettile : int = 3  #0=anywhere 1=creature 2=empty 3=nowall 
var level : int = 3
var selection_cost : int = 6
var max_plevel : int = 7
var in_field : bool = true
var in_combat : bool = true
var description : String = 'This spell adds a magical substance to the bloodstream. All those affected will move slower and have fewer Actions per Round than normal.'
var resist : int = 3 #dodgeable and  drvsablle
#var aoe : String = 'b1'
var los : bool = true
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Web'
var proj_hit : String = 'Web'
var sounds : Array = ['spell launch 4.wav','hit effect 1.wav']
var max_focus_loss : int = 0

static func get_targets(_power : int, __casterchar)->int :
	return 1

static func get_min_duration(_power : int, __casterchar) -> int :
	return _power * 1

static func get_max_duration(_power : int, __casterchar) -> int :
	return _power * 2

static func get_range(_power : int, __casterchar) -> int :
	return 10
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return -7777777 #= infinite wiith resist==0 anyway

static func get_sp_cost(_power : int, _casterchar) :
	return 20*_power

static func get_target_number(_power : int, _casterchar) :
	return 1

static func get_aoe(_power : int, _casterchar) :
	return 'cr'

static func add_traits_to_target(_castercrea, c,_power) :
	var duration = 0
	for i in range(_power) :
		duration += 1 + randi()% 2
	var traitscript = load('res://shared_assets/traits/'+'t_slow.gd')
	c.add_trait(traitscript,[duration])

"
,
"Creature Summon 1" : 
"
var name : String = 'Creature Summon 1'
var attributes : Array = []
var tags : Array = ['Magical', 'Summon']
var schools : Array = ['Enchanter','Sorcerer']
var targettile : int = 2  #0=anywhere 1=creature 2=empty 3=nowall 

var level : int = 5
var selection_cost : int = 15
var max_plevel : int = 7
var in_field : bool = false
var in_combat : bool = true
var description : String = 'Will cause creatures to appear from the void and fight for the caster.'
var resist : int = 2 #ignores evasion
#var aoe : String = 'b1'
var los : bool = false
var ray : bool = false
var rot : bool = false
var proj_tex : String = 'Ball'
var proj_hit : String = 'Sphere'
var sounds : Array = ['pinball bumper.wav','jump.wav']
var max_focus_loss : int = 0

const ixi : Array = [Vector2i.ZERO]
const ixii : Array = [Vector2i.ZERO, Vector2i.DOWN]
const iixi : Array = [Vector2i.ZERO, Vector2i.RIGHT]
const iixii : Array = [Vector2i.ZERO, Vector2i.DOWN, Vector2i.RIGHT, Vector2i.ONE]



static func get_targets(_power : int, __casterchar)->int :
	return _power

static func get_min_duration(_power : int, __casterchar) -> int :
	return 0

static func get_max_duration(_power : int, __casterchar) -> int :
	return 0

static func get_range(_power : int, __casterchar) -> int :
	return 24
	
static func get_min_damage(_power:int, _casterchar) :
	return 0
	
static func get_max_damage(_power:int, _casterchar) :
	return 0
	
static func get_damage_roll(_power : int, _casterchar) :
	return 0

static func get_accuracy(_casterchar, _power : int) :
	return 1.0

static func get_sp_cost(_power : int, _casterchar) :
	return 1*_power

static func get_target_number(_power : int, _casterchar) :
	return _power

static func get_aoe(_power : int, _casterchar) :
	return [ixi, ixii, iixi, iixii].pick_random()

static func special_effect(_castercrea, _spell, _power, _main_targeted_tile, _effected_tiles, _effected_creas, _add_terrain) :
	print('CREATURE SUMMON1 SPECIAL')
	var newpos : Vector2 = _main_targeted_tile
	var CreatureGD : GDScript = load('res://Creature/Creature.gd')
	var creascript = CreatureGD.new()
	var aoe_shape : Array = GameGlobal.map.targetingLayer.aoe_shape
	var creature_name : String = ''
	match aoe_shape :
		ixi :
			creature_name = 'Alien Beetle'
		ixii :
			creature_name = 'Alien Beetle'
		iixi :
			creature_name = 'Alien Beetle'
		iixii :
			creature_name = 'Giant Snail'
		_ :
			creature_name = 'Alien Beetle'
	creascript.initialize_from_bestiary_dict(creature_name)
	print('SPECIAL aftre init from bestiary')
	creascript.position = newpos
	creascript.is_summoned = true
	creascript.summoner_name = _castercrea.name
	creascript.summoner = _castercrea
	creascript.baseFaction = _castercrea.baseFaction
	creascript.curFaction = _castercrea.curFaction
	StateMachine.combat_state.add_pc_or_npc_ally_to_battle_map(creascript, newpos)
	return true

"
}
